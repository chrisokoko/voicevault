import os
import json
import hashlib
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional
from dotenv import load_dotenv

load_dotenv()

# Audio processing settings
AUDIO_FOLDER = os.getenv('AUDIO_FOLDER', './audio_files')
SUPPORTED_FORMATS = ['.m4a', '.mp3', '.wav', '.aiff', '.mp4', '.mov']

# Notion API settings
NOTION_TOKEN = os.getenv('NOTION_TOKEN', 'your_notion_integration_token_here')
NOTION_DATABASE_ID = os.getenv('NOTION_DATABASE_ID')
NOTION_PARENT_PAGE_ID = 'your_notion_parent_page_id_here'  # Optional - for creating database

# Claude API settings
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY', 'your_claude_api_key_here')

# Speech recognition settings
USE_MAC_SPEECH_RECOGNITION = True
USE_WHISPER_API = True

# Database persistence settings
DATABASE_CONFIG_FILE = Path(__file__).parent.parent / 'database_config.json'
PROCESSED_FILES_DB = Path(__file__).parent.parent / 'processed_files.json'

def load_database_id():
    """Load the persisted database ID from config file"""
    try:
        if DATABASE_CONFIG_FILE.exists():
            with open(DATABASE_CONFIG_FILE, 'r') as f:
                config = json.load(f)
                return config.get('notion_database_id')
    except Exception:
        pass
    return None

def save_database_id(database_id: str):
    """Save the database ID to config file"""
    try:
        config = {}
        if DATABASE_CONFIG_FILE.exists():
            with open(DATABASE_CONFIG_FILE, 'r') as f:
                config = json.load(f)
        
        config['notion_database_id'] = database_id
        
        with open(DATABASE_CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=2)
        return True
    except Exception:
        return False

# Load the stored database ID if available
if not NOTION_DATABASE_ID:
    NOTION_DATABASE_ID = load_database_id()

def calculate_file_hash(file_path: str) -> str:
    """Calculate SHA-256 hash of a file for duplicate detection"""
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception:
        return ""

def is_file_processed(file_path: str) -> bool:
    """Check if file has already been processed"""
    try:
        if not PROCESSED_FILES_DB.exists():
            return False
        
        file_hash = calculate_file_hash(file_path)
        if not file_hash:
            return False
        
        with open(PROCESSED_FILES_DB, 'r') as f:
            processed_files = json.load(f)
        
        return file_hash in processed_files
    except Exception:
        return False

def mark_file_as_processed(file_path: str, notion_page_id: Optional[str] = None) -> bool:
    """Mark file as processed in the database"""
    try:
        file_hash = calculate_file_hash(file_path)
        if not file_hash:
            return False
        
        processed_files = {}
        if PROCESSED_FILES_DB.exists():
            with open(PROCESSED_FILES_DB, 'r') as f:
                processed_files = json.load(f)
        
        processed_files[file_hash] = {
            'filename': os.path.basename(file_path),
            'full_path': file_path,
            'processed_at': datetime.now().isoformat(),
            'notion_page_id': notion_page_id,
            'file_size': os.path.getsize(file_path) if os.path.exists(file_path) else 0
        }
        
        with open(PROCESSED_FILES_DB, 'w') as f:
            json.dump(processed_files, f, indent=2)
        
        return True
    except Exception:
        return False

def get_processed_file_info(file_path: str) -> Optional[Dict]:
    """Get processing info for a file"""
    try:
        if not PROCESSED_FILES_DB.exists():
            return None
        
        file_hash = calculate_file_hash(file_path)
        if not file_hash:
            return None
        
        with open(PROCESSED_FILES_DB, 'r') as f:
            processed_files = json.load(f)
        
        return processed_files.get(file_hash)
    except Exception:
        return None

def get_processing_stats() -> Dict[str, int]:
    """Get overall processing statistics"""
    try:
        if not PROCESSED_FILES_DB.exists():
            return {'total_processed': 0, 'successful_uploads': 0, 'failed_uploads': 0}
        
        with open(PROCESSED_FILES_DB, 'r') as f:
            processed_files = json.load(f)
        
        total = len(processed_files)
        successful = sum(1 for f in processed_files.values() if f.get('notion_page_id'))
        failed = total - successful
        
        return {
            'total_processed': total,
            'successful_uploads': successful,
            'failed_uploads': failed
        }
    except Exception:
        return {'total_processed': 0, 'successful_uploads': 0, 'failed_uploads': 0}